plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.11.2'
    id "io.freefair.lombok" version "6.0.0-m2"
}

group 'com.gmail.iparakhina91'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

def selenideVersion = "6.13.0",
    restAssuredVersion = "5.3.0",
    allureVersion = "2.21.0",
    slf4jVersion = "2.0.7"

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

dependencies {
    testImplementation (
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.rest-assured:json-schema-validator:$restAssuredVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "org.assertj:assertj-core:3.24.2",
            "com.github.javafaker:javafaker:1.0.2",
            "org.junit.jupiter:junit-jupiter:5.9.2",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            'io.github.bonigarcia:webdrivermanager:5.2.1',
            'org.aeonbits.owner:owner:1.0.4'
    )

    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.9.2')
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }


    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task edit_testcase(type: Test) {
    useJUnitPlatform {
        includeTags("editing")
    }
}